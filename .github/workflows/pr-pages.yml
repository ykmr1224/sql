name: Publish HTML Reports
on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
  workflow_run:
    workflows: ["*"]
    types: [completed]

permissions:
  contents: write   # needed to push to gh-pages

jobs:
  publish-reports:
    runs-on: ubuntu-latest
    environment:
      name: test-reports
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/revision-${{ github.sha }}/
    steps:
      - uses: actions/checkout@v4

      # Collect all HTML reports from any build/reports directories
      - name: Collect HTML Reports
        run: |
          mkdir -p site
          
          # Find and copy all HTML files from build/reports directories
          echo "üîç Searching for HTML reports..."
          find . -name "*.html" -path "*/build/reports/*" -type f | while read file; do
            echo "Found: $file"
            # Create directory structure and copy file
            target_dir="site/$(dirname "${file#./}")"
            mkdir -p "$target_dir"
            cp "$file" "$target_dir/"
          done
          
          # Also look for common report directories
          for pattern in "*/build/test-results/*/*.html" "*/target/surefire-reports/*.html" "*/target/site/**/*.html" "**/coverage/**/*.html" "**/jacoco/**/*.html"; do
            find . -path "$pattern" -type f 2>/dev/null | while read file; do
              echo "Found: $file"
              target_dir="site/$(dirname "${file#./}")"
              mkdir -p "$target_dir"
              cp "$file" "$target_dir/"
            done
          done
          
          # Generate a simple directory index
          SHORT_COMMIT="${{ github.sha }}"
          SHORT_COMMIT="${SHORT_COMMIT:0:8}"
          BRANCH="${{ github.head_ref || github.ref_name }}"
          
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>HTML Reports - Revision SHORT_COMMIT_PLACEHOLDER</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif; 
                      margin: 40px; 
                      background-color: #f6f8fa;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      background: white;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  h1 { 
                      color: #24292e; 
                      border-bottom: 1px solid #e1e4e8;
                      padding-bottom: 10px;
                  }
                  .summary { 
                      background: linear-gradient(135deg, #f6f8fa 0%, #e1e4e8 100%); 
                      padding: 20px; 
                      border-radius: 6px; 
                      margin-bottom: 30px; 
                      border: 1px solid #e1e4e8;
                  }
                  .summary p {
                      margin: 8px 0;
                  }
                  .reports-list {
                      list-style: none;
                      padding: 0;
                  }
                  .reports-list li {
                      margin: 10px 0;
                      padding: 12px;
                      background: #f8f9fa;
                      border: 1px solid #e1e4e8;
                      border-radius: 6px;
                  }
                  .reports-list a {
                      text-decoration: none;
                      color: #0366d6;
                      font-weight: 500;
                  }
                  .reports-list a:hover {
                      text-decoration: underline;
                  }
                  .file-path {
                      color: #586069;
                      font-size: 0.9em;
                      margin-left: 10px;
                  }
                  .no-reports {
                      text-align: center;
                      padding: 40px;
                      color: #586069;
                  }
                  .timestamp { 
                      color: #586069; 
                      font-size: 0.9em; 
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üìä HTML Reports - Revision SHORT_COMMIT_PLACEHOLDER</h1>
                  <div class="summary">
                      <p><strong>Repository:</strong> REPOSITORY_PLACEHOLDER</p>
                      <p><strong>Branch:</strong> BRANCH_PLACEHOLDER</p>
                      <p><strong>Commit:</strong> <code>COMMIT_PLACEHOLDER</code></p>
                      <p class="timestamp"><strong>Generated:</strong> TIMESTAMP_PLACEHOLDER</p>
                  </div>
                  
                  <div id="reports-container">
                      REPORTS_LIST_PLACEHOLDER
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          # Replace placeholders
          sed -i "s/SHORT_COMMIT_PLACEHOLDER/${SHORT_COMMIT}/g" site/index.html
          sed -i "s|REPOSITORY_PLACEHOLDER|${{ github.repository }}|g" site/index.html
          sed -i "s/BRANCH_PLACEHOLDER/${BRANCH}/g" site/index.html
          sed -i "s/COMMIT_PLACEHOLDER/${{ github.sha }}/g" site/index.html
          sed -i "s/TIMESTAMP_PLACEHOLDER/$(date -u)/g" site/index.html
          
          # Generate reports list
          reports_html=""
          if find site -name "*.html" ! -name "index.html" | head -1 | grep -q .; then
              reports_html="<ul class=\"reports-list\">"
              find site -name "*.html" ! -name "index.html" | sort | while read file; do
                  relative_path="${file#site/}"
                  display_name=$(basename "$file" .html)
                  dir_name=$(dirname "$relative_path")
                  reports_html="$reports_html<li><a href=\"$relative_path\">$display_name</a><span class=\"file-path\">$dir_name</span></li>"
              done
              reports_html="$reports_html</ul>"
          else
              reports_html="<div class=\"no-reports\"><h2>‚ÑπÔ∏è No HTML Reports Found</h2><p>No HTML reports were found in build directories. Reports will appear here after CI jobs complete.</p></div>"
          fi
          
          # Replace reports list placeholder
          # Use a temporary file for multiline replacement
          echo "$reports_html" > site/reports.tmp
          perl -i -pe 'BEGIN{undef $/;} s/REPORTS_LIST_PLACEHOLDER/`cat site\/reports.tmp`/smge' site/index.html
          rm site/reports.tmp
          
          # Create a summary of what was collected
          echo "## HTML Reports Summary" > site/SUMMARY.md
          echo "" >> site/SUMMARY.md
          echo "Generated for revision: ${SHORT_COMMIT}" >> site/SUMMARY.md
          echo "Repository: ${{ github.repository }}" >> site/SUMMARY.md
          echo "Branch: ${BRANCH}" >> site/SUMMARY.md
          echo "Commit: ${{ github.sha }}" >> site/SUMMARY.md
          echo "" >> site/SUMMARY.md
          
          # List what was found
          report_count=$(find site -name "*.html" ! -name "index.html" | wc -l)
          if [ "$report_count" -gt 0 ]; then
              echo "### Found $report_count HTML Reports:" >> site/SUMMARY.md
              find site -name "*.html" ! -name "index.html" | sort | while read file; do
                  echo "- ${file#site/}" >> site/SUMMARY.md
              done
          else
              echo "No HTML reports found. Reports will appear after CI jobs complete." >> site/SUMMARY.md
          fi

      # Publish to gh-pages using the industry-standard action
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: site
          destination_dir: revision-${{ github.sha }}
          keep_files: true

      # Add a clickable link in the run summary
      - name: Summary
        run: |
          SHORT_COMMIT="${{ github.sha }}"
          SHORT_COMMIT="${SHORT_COMMIT:0:8}"
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/revision-${{ github.sha }}/"
          
          {
            echo "### üìä HTML Reports Published"
            echo ""
            echo "- **üìã Dashboard:** [$URL]($URL)"
            echo "- **üîç Revision:** ${SHORT_COMMIT}"
            echo "- **üåø Branch:** ${{ github.head_ref || github.ref_name }}"
            echo "- **üìÖ Generated:** $(date -u)"
            echo ""
            echo "The dashboard automatically lists all HTML files found in build directories."
            echo ""
            echo "**Search Locations:**"
            echo "- \`*/build/reports/**/*.html\`"
            echo "- \`*/build/test-results/**/*.html\`"
            echo "- \`*/target/surefire-reports/*.html\`"
            echo "- \`*/target/site/**/*.html\`"
            echo "- \`**/coverage/**/*.html\`"
            echo "- \`**/jacoco/**/*.html\`"
          } >> "$GITHUB_STEP_SUMMARY"
