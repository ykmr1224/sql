name: Generate Test Reports and Publish

on:
  workflow_dispatch:  # Manual trigger
  push:

permissions:
  contents: write   # needed to push to gh-pages

jobs:
  generate-fake-reports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Fake HTML Reports
        run: |
          # Create various types of fake reports to test the collection
          
          # Gradle-style test reports
          mkdir -p build/reports/tests/test
          cat > build/reports/tests/test/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Test Results</title></head>
          <body>
            <h1>üß™ Unit Test Results</h1>
            <p><strong>Tests run:</strong> 42</p>
            <p><strong>Failures:</strong> 0</p>
            <p><strong>Errors:</strong> 0</p>
            <p><strong>Success rate:</strong> 100%</p>
            <p><strong>Time:</strong> 1.234s</p>
            <h2>Test Classes</h2>
            <ul>
              <li>‚úÖ com.example.UserServiceTest</li>
              <li>‚úÖ com.example.DatabaseTest</li>
              <li>‚úÖ com.example.ApiControllerTest</li>
            </ul>
          </body>
          </html>
          EOF
          
          # JaCoCo coverage report
          mkdir -p build/reports/jacoco/test/html
          cat > build/reports/jacoco/test/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>JaCoCo Coverage Report</title></head>
          <body>
            <h1>üìä Code Coverage Report</h1>
            <table border="1">
              <tr><th>Package</th><th>Class Coverage</th><th>Method Coverage</th><th>Line Coverage</th></tr>
              <tr><td>com.example.service</td><td>85%</td><td>78%</td><td>82%</td></tr>
              <tr><td>com.example.controller</td><td>92%</td><td>88%</td><td>90%</td></tr>
              <tr><td>com.example.util</td><td>95%</td><td>93%</td><td>94%</td></tr>
            </table>
            <p><strong>Overall Coverage:</strong> 87.3%</p>
          </body>
          </html>
          EOF
          
          # Maven Surefire reports
          mkdir -p target/surefire-reports
          cat > target/surefire-reports/TEST-com.example.UserServiceTest.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Surefire Test Report</title></head>
          <body>
            <h1>üî¨ Surefire Test Report</h1>
            <h2>com.example.UserServiceTest</h2>
            <p><strong>Tests:</strong> 15</p>
            <p><strong>Failures:</strong> 0</p>
            <p><strong>Errors:</strong> 0</p>
            <p><strong>Skipped:</strong> 1</p>
            <p><strong>Time elapsed:</strong> 0.456 sec</p>
            <h3>Test Methods</h3>
            <ul>
              <li>‚úÖ testCreateUser()</li>
              <li>‚úÖ testUpdateUser()</li>
              <li>‚úÖ testDeleteUser()</li>
              <li>‚è≠Ô∏è testLegacyFeature() - SKIPPED</li>
            </ul>
          </body>
          </html>
          EOF
          
          # SpotBugs report
          mkdir -p build/reports/spotbugs
          cat > build/reports/spotbugs/main.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>SpotBugs Report</title></head>
          <body>
            <h1>üêõ SpotBugs Analysis Report</h1>
            <p><strong>Classes analyzed:</strong> 156</p>
            <p><strong>Bug instances:</strong> 3</p>
            <p><strong>High priority:</strong> 0</p>
            <p><strong>Medium priority:</strong> 2</p>
            <p><strong>Low priority:</strong> 1</p>
            <h2>Issues Found</h2>
            <ul>
              <li>‚ö†Ô∏è Possible null pointer dereference in UserService.java:42</li>
              <li>‚ö†Ô∏è Dead store to local variable in DatabaseUtil.java:78</li>
              <li>‚ÑπÔ∏è Unused field in ConfigManager.java:15</li>
            </ul>
          </body>
          </html>
          EOF
          
          # Checkstyle report
          mkdir -p build/reports/checkstyle
          cat > build/reports/checkstyle/main.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Checkstyle Report</title></head>
          <body>
            <h1>üìè Checkstyle Report</h1>
            <p><strong>Files checked:</strong> 89</p>
            <p><strong>Total violations:</strong> 12</p>
            <p><strong>Errors:</strong> 2</p>
            <p><strong>Warnings:</strong> 10</p>
            <h2>Violations by Category</h2>
            <ul>
              <li>Imports: 4 violations</li>
              <li>Whitespace: 3 violations</li>
              <li>Javadoc: 3 violations</li>
              <li>Naming: 2 violations</li>
            </ul>
          </body>
          </html>
          EOF
          
          # Integration test results
          mkdir -p build/test-results/integTest
          cat > build/test-results/integTest/results.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Integration Test Results</title></head>
          <body>
            <h1>üîó Integration Test Results</h1>
            <p><strong>Test suites:</strong> 8</p>
            <p><strong>Tests run:</strong> 67</p>
            <p><strong>Failures:</strong> 1</p>
            <p><strong>Errors:</strong> 0</p>
            <p><strong>Duration:</strong> 2m 34s</p>
            <h2>Test Suites</h2>
            <ul>
              <li>‚úÖ DatabaseIntegrationTest</li>
              <li>‚úÖ ApiIntegrationTest</li>
              <li>‚úÖ SecurityIntegrationTest</li>
              <li>‚ùå PerformanceIntegrationTest (1 failure)</li>
            </ul>
          </body>
          </html>
          EOF
          
          # Custom report in different location
          mkdir -p custom/reports/analysis
          cat > custom/reports/analysis/summary.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head><title>Custom Analysis Report</title></head>
          <body>
            <h1>üîç Custom Analysis Report</h1>
            <p>This is a custom report in a non-standard location to test the generic collection.</p>
            <p><strong>Analysis completed:</strong> $(date)</p>
            <p><strong>Files processed:</strong> 234</p>
            <p><strong>Issues found:</strong> 7</p>
          </body>
          </html>
          EOF
          
          echo "‚úÖ Generated fake HTML reports in multiple locations:"
          find . -name "*.html" -type f | sort

      - name: Upload HTML Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: html-reports-${{ github.run_id }}
          path: |
            build/reports/**/*.html
            target/**/*.html
            custom/reports/**/*.html
          retention-days: 1

      - name: List Generated Reports
        run: |
          echo "## üìä Generated Test Reports" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following HTML reports were generated and uploaded as artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          find . -name "*.html" -type f | sort | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "These reports will be collected by the 'Publish HTML Reports' job." >> $GITHUB_STEP_SUMMARY

  publish-reports:
    runs-on: ubuntu-latest
    needs: generate-fake-reports  # This job runs after generate-fake-reports completes
    environment:
      name: test-reports
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/revision-${{ github.sha }}/
    steps:
      - uses: actions/checkout@v4

      # Download artifacts from the previous job
      - name: Download HTML Report Artifacts
        uses: actions/download-artifact@v4
        with:
          name: html-reports-${{ github.run_id }}
          path: downloaded-artifacts

      # Collect all HTML reports from artifacts and workspace
      - name: Collect HTML Reports
        run: |
          # Enable debug mode to see all commands
          set -x
          
          mkdir -p site
          
          # Debug information
          echo "üîç Debug: Job dependency information"
          echo "This job runs after: generate-fake-reports"
          echo "Run ID: ${{ github.run_id }}"
          echo "Current working directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          # List what was downloaded
          echo "üîç Checking downloaded artifacts..."
          if [ -d "downloaded-artifacts" ]; then
            echo "Downloaded artifacts directory exists"
            ls -la downloaded-artifacts/
            echo "All files in downloaded-artifacts:"
            find downloaded-artifacts -type f -exec ls -la {} \;
          else
            echo "No downloaded-artifacts directory found"
          fi
          
          # Copy artifacts from the previous job
          echo "üîç Searching for HTML reports in artifacts..."
          if [ -d "downloaded-artifacts" ]; then
            find downloaded-artifacts -name "*.html" -type f | while read file; do
              echo "Found artifact: $file"
              # Create directory structure and copy file
              relative_path="${file#downloaded-artifacts/}"
              target_dir="site/$(dirname "$relative_path")"
              echo "Creating directory: $target_dir"
              mkdir -p "$target_dir"
              echo "Copying $file to $target_dir/"
              cp "$file" "$target_dir/"
              echo "Copy completed"
            done
          else
            echo "No downloaded-artifacts directory found - artifacts may not have been downloaded"
          fi
          
          # Show what's in site directory after copying artifacts
          echo "üîç Contents of site directory after copying artifacts:"
          if [ -d "site" ]; then
            find site -type f -exec ls -la {} \;
          else
            echo "Site directory doesn't exist yet"
          fi
          
          # Find and copy all HTML files from build/reports directories (current workspace)
          echo "üîç Searching for HTML reports in workspace..."
          find . -name "*.html" -path "*/build/reports/*" -type f | while read file; do
            echo "Found: $file"
            # Create directory structure and copy file
            target_dir="site/$(dirname "${file#./}")"
            mkdir -p "$target_dir"
            cp "$file" "$target_dir/"
          done
          
          # Also look for common report directories
          for pattern in "*/build/test-results/*/*.html" "*/target/surefire-reports/*.html" "*/target/site/**/*.html" "**/coverage/**/*.html" "**/jacoco/**/*.html"; do
            find . -path "$pattern" -type f 2>/dev/null | while read file; do
              echo "Found: $file"
              target_dir="site/$(dirname "${file#./}")"
              mkdir -p "$target_dir"
              cp "$file" "$target_dir/"
            done
          done
          
          # Generate a simple directory index
          SHORT_COMMIT="${{ github.sha }}"
          SHORT_COMMIT="${SHORT_COMMIT:0:8}"
          BRANCH="${{ github.head_ref || github.ref_name }}"
          
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>HTML Reports - Revision SHORT_COMMIT_PLACEHOLDER</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif; 
                      margin: 40px; 
                      background-color: #f6f8fa;
                  }
                  .container {
                      max-width: 1200px;
                      margin: 0 auto;
                      background: white;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
                  }
                  h1 { 
                      color: #24292e; 
                      border-bottom: 1px solid #e1e4e8;
                      padding-bottom: 10px;
                  }
                  .summary { 
                      background: linear-gradient(135deg, #f6f8fa 0%, #e1e4e8 100%); 
                      padding: 20px; 
                      border-radius: 6px; 
                      margin-bottom: 30px; 
                      border: 1px solid #e1e4e8;
                  }
                  .summary p {
                      margin: 8px 0;
                  }
                  .reports-list {
                      list-style: none;
                      padding: 0;
                  }
                  .reports-list li {
                      margin: 10px 0;
                      padding: 12px;
                      background: #f8f9fa;
                      border: 1px solid #e1e4e8;
                      border-radius: 6px;
                  }
                  .reports-list a {
                      text-decoration: none;
                      color: #0366d6;
                      font-weight: 500;
                  }
                  .reports-list a:hover {
                      text-decoration: underline;
                  }
                  .file-path {
                      color: #586069;
                      font-size: 0.9em;
                      margin-left: 10px;
                  }
                  .no-reports {
                      text-align: center;
                      padding: 40px;
                      color: #586069;
                  }
                  .timestamp { 
                      color: #586069; 
                      font-size: 0.9em; 
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üìä HTML Reports - Revision SHORT_COMMIT_PLACEHOLDER</h1>
                  <div class="summary">
                      <p><strong>Repository:</strong> REPOSITORY_PLACEHOLDER</p>
                      <p><strong>Branch:</strong> BRANCH_PLACEHOLDER</p>
                      <p><strong>Commit:</strong> <code>COMMIT_PLACEHOLDER</code></p>
                      <p class="timestamp"><strong>Generated:</strong> TIMESTAMP_PLACEHOLDER</p>
                  </div>
                  
                  <div id="reports-container">
                      REPORTS_LIST_PLACEHOLDER
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          # Replace placeholders
          sed -i "s/SHORT_COMMIT_PLACEHOLDER/${SHORT_COMMIT}/g" site/index.html
          sed -i "s|REPOSITORY_PLACEHOLDER|${{ github.repository }}|g" site/index.html
          sed -i "s/BRANCH_PLACEHOLDER/${BRANCH}/g" site/index.html
          sed -i "s/COMMIT_PLACEHOLDER/${{ github.sha }}/g" site/index.html
          sed -i "s/TIMESTAMP_PLACEHOLDER/$(date -u)/g" site/index.html
          
          # Generate reports list
          reports_html=""
          if find site -name "*.html" ! -name "index.html" | head -1 | grep -q .; then
              reports_html="<ul class=\"reports-list\">"
              find site -name "*.html" ! -name "index.html" | sort | while read file; do
                  relative_path="${file#site/}"
                  display_name=$(basename "$file" .html)
                  dir_name=$(dirname "$relative_path")
                  reports_html="$reports_html<li><a href=\"$relative_path\">$display_name</a><span class=\"file-path\">$dir_name</span></li>"
              done
              reports_html="$reports_html</ul>"
          else
              reports_html="<div class=\"no-reports\"><h2>‚ÑπÔ∏è No HTML Reports Found</h2><p>No HTML reports were found in build directories. Reports will appear here after CI jobs complete.</p></div>"
          fi
          
          # Replace reports list placeholder
          # Use a temporary file for multiline replacement
          echo "$reports_html" > site/reports.tmp
          perl -i -pe 'BEGIN{undef $/;} s/REPORTS_LIST_PLACEHOLDER/`cat site\/reports.tmp`/smge' site/index.html
          rm site/reports.tmp
          
          # Create a summary of what was collected
          echo "## HTML Reports Summary" > site/SUMMARY.md
          echo "" >> site/SUMMARY.md
          echo "Generated for revision: ${SHORT_COMMIT}" >> site/SUMMARY.md
          echo "Repository: ${{ github.repository }}" >> site/SUMMARY.md
          echo "Branch: ${BRANCH}" >> site/SUMMARY.md
          echo "Commit: ${{ github.sha }}" >> site/SUMMARY.md
          echo "" >> site/SUMMARY.md
          
          # List what was found
          report_count=$(find site -name "*.html" ! -name "index.html" | wc -l)
          if [ "$report_count" -gt 0 ]; then
              echo "### Found $report_count HTML Reports:" >> site/SUMMARY.md
              find site -name "*.html" ! -name "index.html" | sort | while read file; do
                  echo "- ${file#site/}" >> site/SUMMARY.md
              done
          else
              echo "No HTML reports found. Reports will appear after CI jobs complete." >> site/SUMMARY.md
          fi

      # Show final site contents before deployment
      - name: Debug - Show Final Site Contents
        run: |
          set -x
          echo "üîç Final contents of site directory before deployment:"
          if [ -d "site" ]; then
            echo "Site directory exists"
            find site -type f -exec ls -la {} \;
            echo ""
            echo "Total files to deploy:"
            find site -type f | wc -l
            echo ""
            echo "Directory structure:"
            tree site || find site -type d | sort
          else
            echo "‚ùå Site directory does not exist!"
            exit 1
          fi

      # Publish to gh-pages using the industry-standard action
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: site
          destination_dir: revision-${{ github.sha }}
          keep_files: true

      # Verify deployment
      - name: Debug - Verify Deployment
        run: |
          set -x
          echo "üîç Deployment completed"
          echo "Expected URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/revision-${{ github.sha }}/"
          echo "Files that should have been deployed:"
          find site -type f | sort

      # Add a clickable link in the run summary
      - name: Summary
        run: |
          SHORT_COMMIT="${{ github.sha }}"
          SHORT_COMMIT="${SHORT_COMMIT:0:8}"
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/revision-${{ github.sha }}/"
          
          {
            echo "### üìä HTML Reports Published"
            echo ""
            echo "- **üìã Dashboard:** [$URL]($URL)"
            echo "- **üîç Revision:** ${SHORT_COMMIT}"
            echo "- **üåø Branch:** ${{ github.head_ref || github.ref_name }}"
            echo "- **üìÖ Generated:** $(date -u)"
            echo ""
            echo "The dashboard automatically lists all HTML files found in build directories."
            echo ""
            echo "**Search Locations:**"
            echo "- \`*/build/reports/**/*.html\`"
            echo "- \`*/build/test-results/**/*.html\`"
            echo "- \`*/target/surefire-reports/*.html\`"
            echo "- \`*/target/site/**/*.html\`"
            echo "- \`**/coverage/**/*.html\`"
            echo "- \`**/jacoco/**/*.html\`"
          } >> "$GITHUB_STEP_SUMMARY"
